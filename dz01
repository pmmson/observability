Описание:

На виртуальной машине установите любую open source CMS, которая включает в себя следующие компоненты: nginx, php-fpm, database (MySQL or Postgresql)
На этой же виртуальной машине установите Prometheus exporters для сбора метрик со всех компонентов системы (начиная с VM и заканчивая DB, не забудьте про blackbox exporter, который будет проверять доступность вашей CMS)
На этой же или дополнительной виртуальной машине установите Prometheus, задачей которого будет раз в 5 секунд собирать метрики с экспортеров.
  ==================================================================

Созданы 2 виртуальные машины с адресами 192.168.192.141 и 192.168.192.248
На одной из установлена October CMS (https://octobercms.com/)
Проверяем и обновляем пакеты системы
  sudo apt update -y
  sudo apt upgrade -y

1. Устанавливаем Node Exporter на виртуальные машины

Скачиваем дистрибутив (https://github.com/prometheus/node_exporter/releases)
wget https://github.com/prometheus/node_exporter/releases/download/v1.8.2/node_exporter-1.8.2.linux-amd64.tar.gz
        
Распаковываем
tar -xzvf node_exporter-1.8.2.linux-amd64.tar.gz

node_exporter-1.8.2.linux-amd64
├── LICENSE
├── node_exporter
└── NOTICE

Создаем пользователя prometheus
sudo useradd -rs /bin/false prometheus

Копируем бинарный файл экспортера в /usr/local/bin
cp node_exporter-1.8.2.linux-amd64/node_exporter /usr/local/bin/

Наделяем правами пользователя prometheus
sudo chown prometheus:prometheus /usr/local/bin/node_exporter

Создаем сервис
sudo nano /etc/systemd/system/node_exporter.service

[Unit]
Description=Node Exporter
After=network.target
[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/node_exporter
[Install]
WantedBy=multi-user.target

Применяем
sudo systemctl daemon-reload

Запускаем сервис и устанавливаем автозапуск, проверяем статус
sudo systemctl start node_exporter.service
sudo systemctl enable node_exporter.service
sudo systemctl status node_exporter.service

● node_exporter.service - Node Exporter
     Loaded: loaded (/etc/systemd/system/node_exporter.service; enabled; preset: enabled)
     Active: active (running) since Thu 2025-01-02 11:34:39 UTC; 1min 39s ago
   Main PID: 2562 (node_exporter)
      Tasks: 3 (limit: 2274)
     Memory: 7.1M (peak: 7.4M)
        CPU: 205ms
     CGroup: /system.slice/node_exporter.service
             └─2562 /usr/local/bin/node_exporter

2. Устанавливаем Prometheus на 192.168.192.141
Скачиваем дистрибутив (https://github.com/prometheus/prometheus/releases)
wget https://github.com/prometheus/prometheus/releases/download/v3.0.1/prometheus-3.0.1.linux-amd64.tar.gz
        
Распаковываем
tar -xzvf prometheus-3.0.1.linux-amd64.tar.gz

prometheus-3.0.1.linux-amd64
├── LICENSE
├── NOTICE
├── prometheus
├── prometheus.yml
└── promtool

Копируем бинарные файлы в /usr/local/bin
cp prometheus-3.0.1.linux-amd64/prometheus /usr/local/bin/
cp prometheus-3.0.1.linux-amd64/prometool /usr/local/bin/

Наделяем правами пользователя prometheus
sudo chown prometheus:prometheus /usr/local/bin/prometheus
sudo chown prometheus:prometheus /usr/local/bin/prometool

Создаем папки
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus
Выдаем права
sudo chown prometheus:prometheus /etc/prometheus
sudo chown prometheus:prometheus /var/lib/prometheus
Копируем файл конфигурации
sudo cp prometheus-3.0.1.linux-amd64/prometheus.yml /etc/prometheus/

Прописываем в файле prometheus.yml
prometheus и node_exporter

# my global config
global:
  scrape_interval: 10s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  # evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: "prometheus_master"

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.
    scrape_interval: 5s
    static_configs:
     - targets: ["localhost:9090"]

  - job_name: 'node_exporter_master'
    scrape_interval: 5s
    static_configs:
     - targets: ['localhost:9100']

  - job_name: 'node_exporter_cms'
    scrape_interval: 5s
    static_configs:
     - targets: ["192.168.192.248:9100"]


Создаем сервис
sudo nano /etc/systemd/system/prometheus.service

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target
[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
--config.file /etc/prometheus/prometheus.yml \
--storage.tsdb.path /var/lib/prometheus/
[Install]
WantedBy=multi-user.target

Применяем
sudo systemctl daemon-reload

Запускаем сервис и устанавливаем автозапуск, проверяем статус
sudo systemctl start prometheus.service
sudo systemctl enable prometheus.service
sudo systemctl status prometheus.service

● prometheus.service - Prometheus
     Loaded: loaded (/etc/systemd/system/prometheus.service; enabled; preset: enabled)
     Active: active (running) since Thu 2025-01-02 09:48:36 UTC; 2h 41min ago
   Main PID: 1171 (prometheus)
      Tasks: 7 (limit: 2274)
     Memory: 97.7M (peak: 102.6M)
        CPU: 36.132s
     CGroup: /system.slice/prometheus.service
             └─1171 /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/

3. Устанавливаем Nginx Exporter на 192.168.192.248
Скачиваем дистрибутив (https://github.com/nginxinc/nginx-prometheus-exporter/releases)
wget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v1.4.0/nginx-prometheus-exporter_1.4.0_linux_amd64.tar.gz
        
Распаковываем
tar -xzvf nginx-prometheus-exporter_1.4.0_linux_amd64.tar.gz

nginx-prometheus-exporter

Копируем бинарный файл в /usr/local/bin
cp nginx-prometheus-exporter /usr/local/bin/

Наделяем правами пользователя prometheus
sudo chown prometheus:prometheus /usr/local/bin/nginx-prometheus-exporter

Создаем сервис
sudo nano /etc/systemd/system/nginx_exporter.service

[Unit]
Description=Nginx Exporter
After=network.target
[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/nginx-prometheus-exporter
[Install]
WantedBy=multi-user.target

Применяем
sudo systemctl daemon-reload

Запускаем сервис и устанавливаем автозапуск, проверяем статус
sudo systemctl start nginx_exporter.service
sudo systemctl enable nginx_exporter.service
sudo systemctl status nginx_exporter.service

● nginx_exporter.service - Nginx Exporter
     Loaded: loaded (/etc/systemd/system/nginx_exporter.service; enabled; preset: enabled)
     Active: active (running) since Thu 2025-01-02 17:33:54 UTC; 7s ago
   Main PID: 4704 (nginx-prometheu)
      Tasks: 6 (limit: 2274)
     Memory: 2.4M (peak: 2.4M)
        CPU: 6ms
     CGroup: /system.slice/nginx_exporter.service
             └─4704 /usr/local/bin/nginx-prometheus-exporter

Прописываем в файле prometheus.yml
nginx_exporter

  - job_name: 'nginx_exporter_cms'
    scrape_interval: 5s
    static_configs:
     - targets: ["192.168.192.248:9113"]

Применяем
sudo systemctl restart prometheus.service
sudo systemctl status prometheus.service

4. Устанавливаем Mysqld Exporter на 192.168.192.248
Скачиваем дистрибутив (https://github.com/prometheus/mysqld_exporter/releases)
wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.16.0/mysqld_exporter-0.16.0.linux-amd64.tar.gz
        
Распаковываем
tar -xzvf mysqld_exporter-0.16.0.linux-amd64.tar.gz

mysqld_exporter-0.16.0.linux-amd64
├── LICENSE
├── mysqld_exporter
└── NOTICE

Копируем бинарный файл в /usr/local/bin
cp mysqld_exporter /usr/local/bin/

Наделяем правами пользователя prometheus
sudo chown prometheus:prometheus /usr/local/bin/mysqld_exporter

Создаем сервис
ssudo nano /etc/systemd/system/mysqld_exporter.service

[Unit]
Description=Mysqld Exporter
After=network.target
[Service]
User=prometheus
Group=prometheus
Type=simple
Restart=always
ExecStart=/usr/local/bin/mysqld_exporter \
--config.my-cnf /etc/.mysqld_exporter.cnf \
--collect.global_status \
--collect.info_schema.innodb_metrics \
--collect.auto_increment.columns \
--collect.info_schema.processlist \
--collect.binlog_size \
--collect.info_schema.tablestats \
--collect.global_variables \
--collect.info_schema.query_response_time \
--collect.info_schema.userstats \
--collect.info_schema.tables \
--collect.perf_schema.tablelocks \
--collect.perf_schema.file_events \
--collect.perf_schema.eventswaits \
--collect.perf_schema.indexiowaits \
--collect.perf_schema.tableiowaits \
--collect.slave_status \
--web.listen-address=0.0.0.0:9104

[Install]
WantedBy=multi-user.target

Применяем
sudo systemctl daemon-reload

Создаем файл подключения к БД
sudo nano /etc/.mysqld_exporter.cnf

[client]
user=mysqld_exporter
password=StrongPassword

Наделйем правами
sudo chown root:prometheus /etc/.mysqld_exporter.cnf

Подключаемся к БД и создаем пользователя для метрик
sudo mysql
CREATE USER 'mysqld_exporter'@'localhost' IDENTIFIED BY 'StrongPassword' WITH MAX_USER_CONNECTIONS 2;
GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'mysqld_exporter'@'localhost';
FLUSH PRIVILEGES;
EXIT

Запускаем сервис и устанавливаем автозапуск, проверяем статус
sudo systemctl start mysqld_exporter.service
sudo systemctl enable mysqld_exporter.service
sudo systemctl status mysqld_exporter.service

● mysqld_exporter.service - Mysqld Exporter
     Loaded: loaded (/etc/systemd/system/mysqld_exporter.service; enabled; preset: enabled)
     Active: active (running) since Thu 2025-01-02 18:06:07 UTC; 2min 14s ago
   Main PID: 4851 (mysqld_exporter)
      Tasks: 4 (limit: 2274)
     Memory: 6.9M (peak: 8.1M)
        CPU: 621ms
     CGroup: /system.slice/mysqld_exporter.service
             └─4851 /usr/local/bin/mysqld_exporter --config.my-cnf /etc/.mysqld_exporter.cnf .....

Прописываем в файле prometheus.yml
mysqld_exporter

  - job_name: 'mysqld_exporter_cms'
    scrape_interval: 5s
    static_configs:
     - targets: ["192.168.192.248:9104"]

Применяем
sudo systemctl restart prometheus.service
sudo systemctl status prometheus.service

5. Устанавливаем BlackBox Exporter на 192.168.192.141
Скачиваем дистрибутив (https://github.com/prometheus/blackbox_exporter/releases)
wget https://github.com/prometheus/blackbox_exporter/releases/download/v0.25.0/blackbox_exporter-0.25.0.linux-amd64.tar.gz
        
Распаковываем
tar -xzvf blackbox_exporter-0.25.0.linux-amd64.tar.gz

blackbox_exporter-0.25.0.linux-amd64
├── blackbox_exporter
├── blackbox.yml
├── LICENSE
└── NOTICE

Копируем бинарный файл в /usr/local/bin
cp blackbox_exporter-0.25.0.linux-amd64/blackbox_exporter /usr/local/bin/

Наделяем правами пользователя prometheus
sudo chown prometheus:prometheus /usr/local/bin/blackbox_exporter

Создаем сервис
sudo nano /etc/systemd/system/blackbox_exporter.service

[Unit]
Description=Blackbox Exporter Service
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=prometheus
Group=prometheus
ExecStart=/usr/local/bin/blackbox_exporter --config.file=/etc/blackbox/blackbox.yml
Restart=always

[Install]
WantedBy=multi-user.target

Применяем
sudo systemctl daemon-reload

Создаем папку
sudo mkdir /etc/blackbox
Копируем файл blackbox.yml в /etc/blackbox/

Запускаем сервис и устанавливаем автозапуск, проверяем статус
sudo systemctl start blackbox_exporter.service
sudo systemctl enable blackbox_exporter.service
sudo systemctl status blackbox_exporter.service

● blackbox_exporter.service - Blackbox Exporter Service
     Loaded: loaded (/etc/systemd/system/blackbox_exporter.service; enabled; preset: enabled)
     Active: active (running) since Thu 2025-01-02 18:22:52 UTC; 8s ago
   Main PID: 2834 (blackbox_export)
      Tasks: 6 (limit: 2274)
     Memory: 3.6M (peak: 3.7M)
        CPU: 16ms
     CGroup: /system.slice/blackbox_exporter.service
             └─2834 /usr/local/bin/blackbox_exporter --config.file=/etc/blackbox/blackbox.yml

Прописываем в файле prometheus.yml
blackbox_exporter как проверку его состояния

  - job_name: 'blackbox-master'
    scrape_interval: 5s
    static_configs:
     - targets: ["localhost:9115"]

и прописываем точки-пробы для проверки

  - job_name: 'blackbox-http'
    scrape_interval: 5s
    metrics_path: /probe
    params:
      module: [http_2xx]
    relabel_configs:
    - source_labels: [__address__]
      target_label: __param_target
    - source_labels: [__param_target]
      target_label: instance
    - replacement: localhost:9115
      target_label: __address__
    static_configs:
    - targets:
      - http://192.168.192.248
      - http://192.168.192.248/admin

Применяем
sudo systemctl restart prometheus.service
sudo systemctl status prometheus.service
